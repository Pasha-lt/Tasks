# M - acmp.ru №39 - Волосатый бизнес.
# (Время: 1 сек. Память: 16 Мб Сложность: 32%)
# Одного неформала выгнали с работы, и теперь ему надо как-то зарабатывать себе на жизнь. Поразмыслив, он решил,
# что сможет иметь очень неплохие деньги на продаже собственных волос. Известно,
# что пункты приема покупают волосы произвольной длины стоимостью С у.е. за каждый сантиметр.
# Так как волосяной рынок является очень динамичным,
# то цена одного сантиметра волос меняется каждый день как и курс валют.
# Неформал является очень хорошим бизнес-аналитиком. Он смог вычислить,
# какой будет цена одного сантиметра волос в каждый из ближайших N дней
# (для удобства пронумеруем дни в хронологическом порядке от 0 до N-1). Теперь он хочет определить,
# в какие из этих дней ему следует продавать волосы,
# чтобы по истечению всех N дней заработать максимальное количество денег.
# Заметим, что волосы у неформала растут только ночью и вырастают на 1 сантиметр за ночь. Следует также учесть,
# что до 0-го дня неформал с горя подстригся наголо и к 0-му дню длина его волос составляла 1 сантиметр.
#
# Входные данные
# В первой строке входного файла INPUT.TXT записано целое число N (0 < N ≤ 100).
# Во второй строке через пробел заданы N натуральных чисел, не превосходящих 100,
# соответствующие стоимости C[i] 1 сантиметра волос за каждый i-й день.
#
# Выходные данные
# В единственную строку выходного файла OUTPUT.TXT нужно вывести максимальную денежную сумму,
# которую может заработать неформал за N дней.
#
# Примеры
# №	INPUT.TXT	                            OUTPUT.TXT

# 1)	5
#       73 31 96 24 46	                      380

# 2)	10
#       1 2 3 4 5 6 7 8 9 10	                100

# 3)	10
#       10 9 8 7 6 5 4 3 2 1	                55


def main():
    """Функция в которой мы считываем файл INPUT.txt, преобразовывем элементы списка из типа string в тип int,
     важно так как мы используем сортировку."""
    with open('INPUT.txt', 'r') as f:
        n, *s = f.read().split()
        s = list([int(i) for i in s])
    z = 0
    foo(s, z)
    foo2(n, s, z)


def foo(s, z):
    """
    Используем рекурсию
    Так как нам нужно посчитать максимальную прибль то при продаже по максимальной цене,
    мы обрезаем часть списка и проделываем с ним туже работу пока в списке есть элементы.
    :param s: - Список с ценами.
    :param z: - Счетчик денег.
    :return: Передаем z для записи в файл.
    """
    if len(s) == 0:
        write_result(z)
    else:
        k = s.index(max(s))
        t = s[:k+1]
        z += len(t)*int(t[-1])
        s = s[k+1:]
        foo(s, z)


def foo2(n, s, z):
    """
    Этот вариант является самым быстрым, в этой функции мы осуществляем обход с конца списка и умножаем не количество
    дней на максимальную цену как раньше, а каждый день на максимальную цену наивышшей в данный момент цены.
    :param n: число дней
    :param s: Список с ценами
    :param z: Счетчик денег.
    :return: Передаем z для записи в файл.
    """
    i = int(n) - 1
    maximum = 0
    while i >= 0:
        if s[i] >maximum:
            maximum = s[i]
        z += maximum
        i -= 1
    write_result(z)


def write_result(z):
    """
    Функция для записи результата. Используем флаг 'a' так нам для проверки нужно сверить два результата.
    Для одного результата ставим флаг 'w' и тогда резульаты будут перезатиратся. 
    :param z: Счетчик денег.
    """
    with open('OUTPUT.txt', 'a') as f:
        f.write(str(z)+'\n')


if __name__ == '__main__':
    main()
