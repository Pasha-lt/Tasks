# Единицы acmp(ЗАДАЧА №22)
# На уроках информатики вас, наверное, 
# учили переводить числа из одних систем счисления в другие и выполнять другие подобные операции.
# Пришло время продемонстрировать эти знания. Найдите количество единиц в двоичной записи заданного числа.

# Входные данные
# записываем целое число n (0 ≤ n ≤ 2×109).
#
# Выходные данные
# В единственную строку нужно вывести одно целое число — количество двоичных единиц в записи числа n.
#
# Примеры
# №	    INPUT	  OUTPUT
# 1)      5	        2
# 2)	  7	        3


def foo():
    k = int(input())
    return main(k)


def main(k):
    """Остатком от деления находим значение в двоичной системе, делением по модулю двигаемся дальше по разряду.
    Делаем список, узнав его сумму получим количество 1 в нем тость нужные нам данные. 
    """
    z = []
    while k > 0:
        z.append(k % 2)
        k = k // 2
    return sum(z)


if __name__ == '__main__':
    print(foo())
    assert main(5) == 2
    assert main(7) == 3
    print('Тесты прошли')


exit()


# S - Золото племени АББА asmp(7)
#
# Главный вождь племени Абба не умеет считать.
# В обмен на одну из его земель вождь другого племени предложил ему выбрать одну из трех куч с золотыми монетами.
# Но вождю племени Абба хочется получить наибольшее количество золотых монет. Помогите вождю сделать правильный выбор!
#
# Входные данные
# В первой строке входного файла INPUT.TXT записаны три натуральных числа через пробел.
# Каждое из чисел не превышает 10**100. Числа записаны без ведущих нулей.
#
# Выходные данные
# В выходной файл OUTPUT.TXT нужно вывести одно целое число — максимальное количество монет, которые может взять вождь.
#
# Примеры
# №	INPUT.TXT	                                            OUTPUT.TXT
# 1)	5 7 3	                                                 7
# 2)	987531 234 86364	                                   987531
# 3)	189285 283 4958439238923098349024	            4958439238923098349024


def main():
    """Функция деллает ввод данных, передает список чисел для определения наибольшего"""
    a = []
    with open('INPUT.txt', 'r') as f:
        k = f.read().split()
        for i in k:
            a.append(int(i))
    find_max(a)


def find_max(a):
    """Функция принимает список и находит в нем максимальное число и передает его для записи"""
    k = max(a)
    write(k)


def write(k):
    """Функция принимает результат и записывает его в файл"""
    with open('OUTPUT.txt', 'w') as f:
        f.write(str(k))


if __name__ == '__main__':
    main()


exit()
# Задача №3467. Парты
# Данные вводятся с клавиатуры или из файла input.txt, выводятся на экран или в файл output.txt.

# В некоторой школе решили набрать три новых математических класса и оборудовать кабинеты для них новыми партами.
# За каждой партой может сидеть два учащихся. Известно количество учащихся в каждом из трех классов.
# Выведите наименьшее число парт, которое нужно приобрести для них.
#
# Входные данные
# Программа получает на вход три натуральных числа:
# количество учащихся в каждом из трех классов (числа не превышают 1000).
#
# Выходные данные
# Выведите ответ на задачу.
#
# Примеры:
# входные данные
# 20
# 21
# 22
# выходные данные
# 32
#
# входные данные
# 16
# 18
# 20
# выходные данные
# 27


def main():
    """
    Функция принимает значения и передает их в функцию count для подсчета нужного количества парт.
    a1 - Первый класс
    a2 - Второй класс
    a3 - Третий класс
    """
    a1, a2, a3 = map(int, input().split())
    count(a1, a2, a3)


def count(a1, a2, a3):
    """
    Функция высчитывает нужное количество парт.
    Если у нас непарное количество человек то нам нужно парта за которой будет сидеть один ученик.
    s - нужное количество парт.
    """
    s = (a1+1)//2 + (a2+1)//2 + (a3+1)//2
    print(s)


if __name__ == '__main__':
    main()


exit()


# S - дефисная строка.
# Вводится два слова через пробел. Ваша задача преобразовать данную фразу таким образом,
# чтобы все буквы стали заглавными и между буквами в каждом слове появились дефисы
# Input 1:
# Бросай курить
# Output 1:
# Б-Р-О-С-А-Й К-У-Р-И-Т-Ь
# Input 2:
# cИдИ дОмА
# Output 2:
# C-И-Д-И Д-О-М-А


def main():
    """
    string - Строка которую ввел пользователь.
    :return: Передает строку введеную пользователем в функции обработчик.
    """
    string = input('Введите вашу строку').upper()
    return foo(string)


def foo(string):
    """
    Функция между буквами проставляет дефисы.
    :param string: Строка которую ввел пользователь.
    :return: Выводит результат.
    """
    string = string.split()  # Преобразуем строку в список из двух элементов чтобы делать манипуляции.
    string = '-'.join(string[0]) + ' ' + '-'.join(string[1])  # Обрабатываем элементы и добавляем пробел.
    return string


if __name__ == '__main__':
    print(main())
    
    
exit()

# Is Even
# Check is the given number is even or not. Your function shoudl return True if the number is even,
# andFalse if the number is odd.


def is_even(num: int) -> bool:
    return num % 2 == 0


if __name__ == '__main__':
    print("Example:")
    print(is_even(2))

    # These "asserts" are used for self-checking and not for an auto-testing
    assert is_even(2) == True
    assert is_even(5) == False
    assert is_even(0) == True
    print("Coding complete? Click 'Check' to earn cool rewards!")
    
----------------------------------------
# Multiply (Intro)
# This is an intro mission, the purpose of which is to explain how to solve missions on CheckiO and
# how to get the most out of solving them. When the mission is solved,
# one more station become available for you, containing more complex missions.

# So this mission is the easiest one. Write a function that will receive 2 numbers as input and
# it should return the multiplication of these 2 numbers.


def mult_two(a, b):
    return a * b


if __name__ == '__main__':
    print("Example:")
    print(mult_two(3, 2))

    # These "asserts" are used for self-checking and not for an auto-testing
    assert mult_two(3, 2) == 6
    assert mult_two(1, 0) == 0
    print("Coding complete? Click 'Check' to earn cool rewards!")

----------------------------------------


# easy_unpack
# Your mission here is to create a function that gets a tuple and returns a tuple with 3 elements - the first,
# third and second element from the last for the given array.
# Input: A tuple, at least 3 elements long.
# Output: A tuple.


def easy_unpack(elements: tuple) -> tuple:
    return elements[0], elements[2], elements[-2]


if __name__ == '__main__':
    print('Examples:')
    print(easy_unpack((1, 2, 3, 4, 5, 6, 7, 9)))

    # These "asserts" using only for self-checking and not necessary for auto-testing
    assert easy_unpack((1, 2, 3, 4, 5, 6, 7, 9)) == (1, 3, 7)
    assert easy_unpack((1, 1, 1, 1)) == (1, 1, 1)
    assert easy_unpack((6, 3, 7)) == (6, 7, 3)
    print('Done! Go Check!')

