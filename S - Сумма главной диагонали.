# S - Сумма главной диагонали.
# Вам нужно посчитать сумму элементов двумерного квадратного (NxN) списка, который расположен на главной диагонале.
# Программа сперва принимает на вход число N (N<=15) - количество строк и столбцов в списке,
# а затем в N строказ записанныэлементы списка.
# Sample input 1:
# 2
# 1 2
# 3 4
# Sample Output 1:
# 5

# Sample input 2:
# 3
# 1 2 3
# 4 5 6
# 7 8 9
# Sample Output 1:
# 15

def main():
    """
    step - размер матрцы(NxN).
    count - сумма чисел которые размещенны по диагонали.
    :return:
    """
    step = int(input('size ==>'))
    count = 0
    print(foo2(step, count))


def foo(step, count):
    """
    Пользуемся тем  что индекс главной диагонали постоянно увеличивается на размер матрицы + 1
    matrix - числа которые формируют матрицу.
    :return: Сумма диагонали.
    """
    matrix = list(map(int, input('==>').split()))
    n = 0
    while n < len(matrix):
        count += matrix[n]
        n += step + 1

    return count


def foo2(step, count):
    """Когда мы делаем перебор матрицы в центральной диагонале индекс 'i' равен индексу 'j'.
     В нашем примере будет сложность алгоритма 'n**2', если мы перепишем и укажем что берем индексы где 'i' равен 'i'
    тогда сложность алгоритма будет 'n' что более предпочтительней."""
    a = []
    for i in range(step):
        a.append(list(map(int, input().split())))

    for i in range(step):
        for j in range(step):
            if i == j:
                count += a[i][j]

    return count


if __name__ == '__main__':
    main()
