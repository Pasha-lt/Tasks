# Марсианские факториалы - acmp(ЗАДАЧА №200)
# В 3141 году очередная экспедиция на Марс обнаружила в одной из пещер таинственные знаки.
# Они однозначно доказывали существование на Марсе разумных существ.
# Однако смысл этих таинственных знаков долгое время оставался неизвестным. Недавно один из ученых,
# профессор Очень-Умный, заметил один интересный факт: всего в надписях, составленных из этих знаков,
# встречается ровно K различных символов. Более того,
# все надписи заканчиваются на длинную последовательность одних и тех же символов.
#
# Вывод, который сделал из своих наблюдений профессор, потряс всех ученых Земли.
# Он предположил, что эти надписи являются записями факториалов различных натуральных чисел в системе счисления
# с основанием K. А символы в конце – это конечно же нули – ведь, как известно,
# факториалы больших чисел заканчиваются большим количеством нулей.
# Например, в нашей десятичной системе счисления факториалы заканчиваются на нули начиная с 5! = 1·2·3·4·5 = 120.
# А у числа 100! в конце следует 24 нуля в десятичной системе счисления и
# 48 нулей в системе счисления с основанием 6 – так что у предположения профессора есть разумные основания!
#
# Теперь ученым срочно нужна программа,
# которая по заданным числам N и K найдет количество нулей в конце записи в системе счисления
# с основанием K числа N! = 1·2·3·…·(N-1)·N, чтобы они могли проверить свою гипотезу.
# Вам придется написать им такую программу!
#
# Входные данные
# Входной содержит числа N и K, разделенные пробелом. (1 ≤ N ≤ 109, 2 ≤ K ≤ 1000).
#
# Выходные данные
# Выведите число X - количество нулей в конце записи числа N! в системе счисления с основанием K.
#
# Примеры
# №	    INPUT       	  OUTPUT
# 1)	5 10	            1
# 2)	100 10	            24
# 3)	100 6	            48
# 4)	3 10	            0


def fact(n, q):
    """
    Функция принимает число, считает с него факториал и отправляет в ф-цию которая переводит в 6-ричную систему счисления.
    k - Факториал.
    :param n - Число из которого нужно посчитать факториал:
    :return:
    """
    k = 1
    while n > 1:
        k *= n
        n -= 1
    return foo(k, q)


def foo(k, q):
    """
    Функция принимает факториал, переводит его нужную систему счисления и на сколько нулей он заканчивается.
    :param k - факториал числа.:
    :param q - Система счисления:
    :return:
    """
    new_number = []
    while k > 0:
        new_number.append(k % q)  # Выдаст ряд справа налево, а не как нам привычно слева на право.
        k = k // q
    t = 0
    for i in new_number:
        if i == 0:  # Так как у нас развернутое число то считаем сколько нулей идет подряд.
            t += 1
        else:
            return t
            break


def main():
    """
    n - Число с которого берем факториал.
    q - система счисления.
    :return:
    """
    n = int(input())
    q = int(input())
    print(fact(n, q))


if __name__ == '__main__':
    main()
    assert fact(5, 10) == 1
    assert fact(100, 10) == 24
    assert fact(100, 6) == 48
    assert fact(3, 10) == 0
    print('Тесты прошли успешно')
