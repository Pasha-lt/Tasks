# моя почта 9139136@gmail.com
# Куплю лопату
# Поликарпу срочно понадобилась лопата! Он пришёл в магазин и выбрал подходящую. Лопата, которая подошла Поликарпу,
# продается по цене k бурлей. Считайте, что в магазине неограниченное количество таких лопат.
# В кармане у Поликарпа есть неограниченное количество «дестюльников» (монет номиналом в 10 бурлей) и ровно одна монета номинала r (1 ≤ r ≤ 9).
# Какое наименьшее количество лопат придётся купить Поликарпу, чтобы он смог расплатиться за покупку без сдачи? Очевидно,
# что за 10 лопат он сможет расплатиться без сдачи (заплатив требуемую сумму «дестюльниками», не используя монету номинала r),
# но, возможно, он сможет купить меньшее количество лопат и расплатиться без сдачи. Обратите внимание,
# что Поликарп должен купить хотя бы одну лопату.
# Входные данные
# В единственной строке входных данных записаны два целых числа k и r (1 ≤ k ≤ 1000, 1 ≤ r ≤ 9)
# — цена одной лопаты и номинал монеты в кармане Поликарпа, отличной от «дестюльника».
# Помните, что ещё у него в кармане неограниченное количество монет номинала 10,
# то есть их хватит на покупку любого количества лопат.
# Выходные данные
# Выведите искомое минимальное количество лопат, которые нужно купить Поликарпу, чтобы расплатиться без сдачи.
# Примеры
# входные данные
# 117 3
# выходные данные
# 9
# входные данные
# 237 7
# выходные данные
# 1
# входные данные
# 15 2
# выходные данные
# 2
# Примечание
# В первом примере Поликарп может купить 9 лопат, заплатив 9·117 = 1053 бурлей. В самом деле,
# эту сумму он может заплатив используя монеты номиналом 10 бурлей и одну монету номиналом 3 бурля.
# Купить меньшее количество лопат (и при этом расплатиться без сдачи), он не может.
# Во втором примере Поликарпу достаточно купить одну лопату.
# В третьем примере Поликарп должен купить 2 лопаты, заплатив 2·15 = 30 бурлей. Эту сумму он, очевидно,
# может заплатить без сдачи.
# ------ solution ------


def main():
    k = int(input('How much is a shovel cost?'))
    r = int(input('Coin face value from 0 to 9'))
    sl = 0  # shovel

    while True:
        sl += 1
        if (k * sl - r) % 10 == 0 or k * sl % 10 == 0:
            print(sl)
            break


if __name__ == '__main__':
     main()
