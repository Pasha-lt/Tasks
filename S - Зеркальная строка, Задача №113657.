# Зеркальная строка Задача №113657.
# Дана строка, содержащая только английские буквы (большие и маленькие) и открывающиеся скобки.
# Сформировать новую строку добавлением справа «зеркальной» строки с закрывающимися скобками.
# "(abc(def(g" -> "(abc(def(gg)fed)cba)"
#
# Входные данные
# Вводится строка ненулевой длины. Известно также, что длина строки не превышает 1000 знаков.
#
# Выходные данные
# Вывести строку, которая получится после "зеркальной" половины строки.
#
# Примеры
# входные данные
# (((t((p((y((kx((((e(((((((vw((v(e((v(m(((h(mlx((s((((d(y((((((((mtk(d(umi((s((sx(p((m(r((kqo
# выходные данные
# (((t((p((y((kx((((e(((((((vw((v(e((v(m(((h(mlx((s((((d(y((((((((mtk(d(umi((s((sx(p((m(r((kqo
# oqk))r)m))p)xs))s))imu)d)ktm))))))))y)d))))s))xlm)h)))m)v))e)v))wv)))))))e))))xk))y))p))t)))


def simple_solution(string):
    """
    Методом конкатынация к строке 'a' добавляем ее зрекальное отображение.
    :param a: строка с текстом
    :return: возвращаем строку а плюс ее отзеркаленую часть.
    """
    b = string + string[::-1].replace('(', ')')
    return b


def recursion_solution(string):
    """
    Рекурсивная функция. 
    :param a: строка с текстом
    :return: возвращаем строку а плюс ее отзеркаленую часть. 
    """
    if len(string) == 1:
        if string == '(':
            return '()'
        else:
            return 2*string
    else:
        if string[0] == '(':
            return '(' + recursion_solution(string[1:]) + ')'
        else:
            return string[0] + recursion_solution(string[1:]) + string[0]


def main():
    """
    Функция принимает и строку и отправляет ее в функции обработчики.  
    """
    string = input('==>')
    print(simple_solution(string))
    print(recursion_solution(string))


if __name__ == '__main__':
    main()
