# Project Euler - Problem 012 - Highly divisible triangular number
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?


def foo(n):
    '''Функция определяющая количетво делителей. Принимает число возвращает количество делителей'''
    z = 0  # Количество делителей которое мы будем наполнять.
    for i in range(1, n+1):
        if n % i == 0:
            z += 1
    return z


def bar():
    '''Генератор треугольных чисел'''
    n = 1  # Число которое прибавляем к пердведущему треугольному, чтобы оно тоже стало треугольным.
    k = 1  # Треугольное число.
    while True:
        n += 1
        k += n
        if k % 7 == 0 and k % 5 == 0 and k % 3 == 0 and k % 2 == 0:  # Берем числа которые имеют частые делители.
            t = foo(k)  # Присваеваем t функцию foo
            if t > 501:
                return k  # Возвращаем треугольное число


if __name__ == '__main__':
    print(bar())
