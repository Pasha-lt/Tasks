# B. Подарок от Лены
# ограничение по времени на тест2 seconds
# ограничение по памяти на тест256 megabytes
# вводстандартный ввод
# выводстандартный вывод
# У Васи скоро день рожденья, и Лена захотела сшить ему в подарок расписную салфетку.
# Эту салфетку Лена решила украсить цифрами от 0 до n. Цифры будут расположены в форме ромба,
# причем по центру должна находиться самая большая цифра n, а ближе к краям цифры должны уменьшаться. Например,
# для n = 5 узор на салфетке будет выглядеть следующем образом:
#
#           0
#         0 1 0
#       0 1 2 1 0
#     0 1 2 3 2 1 0
#   0 1 2 3 4 3 2 1 0
# 0 1 2 3 4 5 4 3 2 1 0
#   0 1 2 3 4 3 2 1 0
#     0 1 2 3 2 1 0
#       0 1 2 1 0
#         0 1 0
#           0
#
# Ваша задача — по заданному n определить, как будет выглядеть салфетка.
#
# Входные данные
# В первой строке записано единственное целое число n (2 ≤ n ≤ 9).
#
# Выходные данные
# Выведите рисунок для заданного числа n.
# Необходимо строго соблюдать количество пробелов до первой цифры в каждой строке.
# Каждые две подряд идущие цифры в каждой строке должны быть разделены ровно одним пробелом.
# В конце каждой строки после последней цифры не должно быть пробелов.
# Примеры
# входные данныеСкопировать
# 2
# выходные данныеСкопировать
#     0
#   0 1 0
# 0 1 2 1 0
#   0 1 0
#     0
# входные данныеСкопировать
# 3
# выходные данныеСкопировать
#       0
#     0 1 0
#   0 1 2 1 0
# 0 1 2 3 2 1 0
#   0 1 2 1 0
#     0 1 0
#       0


def foo():
    """
    В функции вводим число которое будет центром ромба. С помощью циклов делаем спад и возрастание от главной линии.
    Главная линия - строка где присутствует наше число.
    """
    n = int(input('Введите цифру'))

    for i in range(n+1):
        # чтобы избавится от квадратных скобок добавляем * (распаковываем список)
        print('  '*(n-i), *list(range(i)), i, *list(range(i)[::-1]), end='')
        print()

    for i in list(range(n)[::-1]):
        print('  ' * (n - i), *list(range(i)), i, *list(range(i)[::-1]), end='')
        print()


if __name__ =='__main__':
    foo()
